
#user  nobody;
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections 1024;
    multi_accept on; # 允许一个工作进程同时接受多个新连接
    accept_mutex on; # 防止惊群效应
    use epoll; # 在Linux上使用epoll事件模型，提高性能
}


http {
    # 全局设置，影响所有server块，允许单个请求的大小，默认1M
    client_max_body_size 1024M;

    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on; # 内核空间中直接处理文件传输
    tcp_nopush on; # 优化数据包发送，通过延迟发送以填充更大的TCP分段
    tcp_nodelay on; # 禁用Nagle算法，立即发送小数据包

    # 设置Keep-Alive超时时间
    keepalive_timeout  65s;
    # 设置每个连接的最大请求数
    keepalive_requests 100;

    #gzip  on;
    # 启用gzip压缩
	gzip on;
	# 对IE6以下的版本都不进行压缩
	gzip_disable "MSIE [1-6]\.(?!.*SV1)";
	# 在响应头中添加Vary: Accept-Encoding，以便缓存服务器根据不同的压缩方式缓存不同的响应
	gzip_vary on;
	# 指定压缩是否适用于所有代理请求
	gzip_proxied any;
	# 指定压缩级别，范围是1-9，数字越大压缩越多，但也会增加CPU负载
	gzip_comp_level 6;
	# gzip缓冲区大小
    gzip_buffers 16 8k;
	# gzip_http请求版本
	gzip_http_version 1.1;
	# 指定文件大小超过多少字节才进行压缩
	gzip_min_length 256;
	# 指定要进行压缩的文件类型
    gzip_types
      text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml
      text/javascript application/javascript application/x-javascript
      text/x-json application/json application/x-web-app-manifest+json
      text/css text/plain text/x-component
      font/opentype application/x-font-ttf application/vnd.ms-fontobject
      image/x-icon;

    server {
        # 默认使用HTTP/1.1，可以显式指定HTTP/1.0或HTTP/2
        # listen       80 http1.0;
        # listen       80 http2;
        listen       80;
        server_name  localhost;

        # 设置虚拟主机的根目录
        root   html/yxx-ui/dist;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # 为特定的URL匹配请求设置根目录
        location / {
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # 设置这些类型的文件在客户端缓存的过期时间为30天
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }
        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

		# location ^~/api/：匹配任何以 /api/ 开头的 URI(location ^~ /api/ 的优先级更高，因为它是一个更具体的匹配)
		# location /api/：匹配任何以 /api/ 结尾的 URI
        location ^~/dev-api/  {
            proxy_http_version 1.1;
            proxy_set_header Host $http_host; # 包括端口号，$host仅域名
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 80s;
            proxy_buffering off; # 禁用代理缓冲
            proxy_cache off; # 禁用代理缓存
            proxy_pass http://localhost:8080/;
			client_max_body_size 4096M;

            # websocket参数
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location ^~/test-api/ {
            proxy_http_version 1.1;
            proxy_set_header Host $http_host; # 包括端口号，$host仅域名
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 80s;
            proxy_buffering off; # 禁用代理缓冲
            proxy_cache off; # 禁用代理缓存
            proxy_pass http://localhost:8080/;
			client_max_body_size 4096M;

            # websocket参数
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location ^~/stage-api/ {
            proxy_http_version 1.1;
            proxy_set_header Host $http_host; # 包括端口号，$host仅域名
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 80s;
            proxy_buffering off; # 禁用代理缓冲
            proxy_cache off; # 禁用代理缓存
            proxy_pass http://localhost:8080/;
			client_max_body_size 4096M;

            # websocket参数
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location ^~/prod-api/ {
            proxy_http_version 1.1;
            proxy_set_header Host $http_host; # 包括端口号，$host仅域名
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 80s;
            proxy_buffering off; # 禁用代理缓冲
            proxy_cache off; # 禁用代理缓存
            proxy_pass http://localhost:8080/;
			client_max_body_size 4096M;

            # websocket参数
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        # 错误处理配置
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    server {
		# 服务器端口使用443，开启ssl，使用http2
		listen       443 ssl http2;
		# 域名，多个以空格分开
		server_name  example.com www.example.com;

        # 设置虚拟主机的根目录
        root   html/yxx-ui/dist;
        #charset koi8-r;

		# ssl证书地址
		ssl_certificate     cert/ssl.pem;  # pem文件的路径(或者crt文件)
		ssl_certificate_key  cert/ssl.key; # key文件的路径

		# ssl验证相关配置
		ssl_session_timeout  5m;    #缓存有效期
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    #加密算法
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #安全链接可选的加密协议
		ssl_prefer_server_ciphers on;    #使用服务器端的首选算法


        # 为特定的URL匹配请求设置根目录
        location / {
            index  index.html index.htm;
            # 用于指定文件的查找规则
            # $uri表示当前请求的URL路径
            # $uri/表示在当前请求的URL路径后面添加/后的路径
            try_files $uri $uri/ /index.html;
        }


        # 设置这些类型的文件在客户端缓存的过期时间为30天
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }
        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }


        # 将这些请求转发到对应地址上，并设置一些HTTP请求头信息
        # $http_host表示客户端请求的主机名
        # $remote_addr表示客户端的IP地址
        # $proxy_add_x_forwarded_for表示通过代理服器转发的客户端IP地址
        location ^~/dev-api/  {
            proxy_http_version 1.1;
            proxy_set_header Host $http_host; # 包括端口号，$host仅域名
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 80s;
            proxy_buffering off; # 禁用代理缓冲
            proxy_cache off; # 禁用代理缓存
            proxy_pass http://localhost:8080/;
			client_max_body_size 4096M;

            # websocket参数
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location ^~/test-api/ {
            proxy_http_version 1.1;
            proxy_set_header Host $http_host; # 包括端口号，$host仅域名
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 80s;
            proxy_buffering off; # 禁用代理缓冲
            proxy_cache off; # 禁用代理缓存
            proxy_pass http://localhost:8080/;
			client_max_body_size 4096M;

            # websocket参数
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location ^~/stage-api/ {
            proxy_http_version 1.1;
            proxy_set_header Host $http_host; # 包括端口号，$host仅域名
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 80s;
            proxy_buffering off; # 禁用代理缓冲
            proxy_cache off; # 禁用代理缓存
            proxy_pass http://localhost:8080/;
			client_max_body_size 4096M;

            # websocket参数
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location ^~/prod-api/ {
            proxy_http_version 1.1;
            proxy_set_header Host $http_host; # 包括端口号，$host仅域名
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 80s;
            proxy_buffering off; # 禁用代理缓冲
            proxy_cache off; # 禁用代理缓存
            proxy_pass http://localhost:8080/;
			client_max_body_size 4096M;

            # websocket参数
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        # 错误处理配置
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
