package ${packageName}.service.impl;

import java.util.List;
#if($table.sub)
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Map;
import com.yxx.common.core.utils.StreamUtils;
#end
#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
#break
#end
#end
import com.yxx.common.core.domain.PageResult;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
#if($table.sub)
import com.yxx.common.utils.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.entity.${subClassName};
#end
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import com.yxx.common.core.service.impl.ServiceImplPlus;
import ${packageName}.mapper.${ClassName}Mapper;
#if($table.sub || $table.tree)
#set($ClassDO=${ClassName})
#set($ClassVO=${ClassName})
#set($ClassQueryDTO=${ClassName})
#set($classQueryDTO="${className}")
#set($ClassEditDTO="${ClassName}")
#set($classEditDTO="${className}")
#else
#set($ClassDO="${ClassName}DO")
#set($ClassVO="${ClassName}VO")
#set($ClassQueryDTO="${ClassName}QueryDTO")
#set($classQueryDTO="${className}QueryDTO")
#set($ClassEditDTO="${ClassName}EditDTO")
#set($classEditDTO="${className}EditDTO")
#end
#if($table.sub || $table.tree)
import ${packageName}.entity.${ClassDO};
#else
import ${packageName}.entity.${ClassDO};
import ${packageName}.entity.${ClassVO};
import ${packageName}.entity.${ClassQueryDTO};
import ${packageName}.entity.${ClassEditDTO};
#end
import ${packageName}.service.I${ClassName}Service;

#foreach ($column in $columns)
#if($column.javaField.toLowerCase().indexOf("id") != -1)
## 获取主键，并首字母大写
#set($IdAttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#break
#end
#end
#if($table.sub)
#foreach ($column in $subTable.columns)
#if($column.javaField.toLowerCase().indexOf("id") != -1)
## 获取主键，并首字母大写
#set($SubIdAttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#break
#end
#end
#end
/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@Service
@RequiredArgsConstructor(onConstructor_ = {@Lazy, @Autowired})
public class ${ClassName}ServiceImpl extends ServiceImplPlus<${ClassName}Mapper, ${ClassDO}> implements I${ClassName}Service {

    private final I${ClassName}Service self;

    private final ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}分页结果
     *
     * @param ${classQueryDTO} ${functionName}查询实体
     * @return ${functionName}分页
     */
    @Override
    public PageResult<${ClassVO}> select${ClassVO}Page(${ClassQueryDTO} ${classQueryDTO}) {
        startPage();
        PageResult<${ClassVO}> page
                = super.getMyBatisPageResult(self.select${ClassDO}List(${classQueryDTO}), ${ClassVO}.class);
        clearPage();
        return page;
    }
#if($table.sub || $table.tree)
#else

    /**
     * 查询${functionName}VO列表
     *
     * @param ${classQueryDTO} ${functionName}查询实体
     * @return ${functionName}集合
     */
    @Override
    public List<${ClassVO}> select${ClassVO}List(${ClassQueryDTO} ${classQueryDTO}) {
        return super.convertList(${className}Mapper.select${ClassName}List(${classQueryDTO}), ${ClassVO}.class);
    }
#end

    /**
     * 查询${functionName}DO列表
     *
     * @param ${classQueryDTO} ${functionName}查询实体
     * @return ${functionName}集合
     */
    @Override
    public List<${ClassDO}> select${ClassDO}List(${ClassQueryDTO} ${classQueryDTO}) {
        return ${className}Mapper.select${ClassName}List(${classQueryDTO});
    }

    /**
     * 查询单个${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}单个
     */
    @Override
    public ${ClassVO} select${ClassVO}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        return super.convertBean(${className}Mapper.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}), ${ClassVO}.class);
    }

    /**
     * 新增${functionName}
     *
     * @param ${classEditDTO} ${functionName}编辑实体
     * @return 结果
     */
#if($table.sub)
    @Transactional(rollbackFor = Exception.class)
#end
    @Override
    public int insert${ClassName}(${ClassEditDTO} ${classEditDTO}) {
#foreach ($column in $columns)
#if($column.javaField == 'createById')
    ${classEditDTO}.fieldFillInsert();
#break
#end
###if($column.javaField == 'createById')
##        ${classEditDTO}.setCreateById(getUserIdOrNotLogged());
###end
###if($column.javaField == 'createByName')
##        ${classEditDTO}.setCreateByName(getUserNameOrNotLogged());
###end
###if($column.javaField == 'createTime')
##        ${classEditDTO}.setCreateTime(getNowLocalDateTime());
###end
#end
#if($table.sub)
        int rows = ${className}Mapper.insert${ClassName}(${className});
        insert${subClassName}(${className}.get${pkColumn.capJavaField}(), ${className}.get${subClassName}List());
        return rows;
#else
        return ${className}Mapper.insert${ClassName}(super.convertT(${classEditDTO}));
#end
    }

    /**
     * 修改${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @param ${classEditDTO} ${functionName}编辑实体
     * @return 结果
     */
#if($table.sub)
    @Transactional(rollbackFor = Exception.class)
#end
    @Override
    public int update${ClassName}(${pkColumn.javaType} ${pkColumn.javaField}, ${ClassEditDTO} ${classEditDTO}) {
#foreach ($column in $columns)
#if($column.javaField == 'createById')
        ${classEditDTO}.fieldFillUpdate();
#break
#end
###if($column.javaField == 'updateById')
##        ${classEditDTO}.setUpdateById(getUserIdOrNotLogged());
###end
###if($column.javaField == 'updateByName')
##        ${classEditDTO}.setUpdateByName(getUserNameOrNotLogged());
###end
###if($column.javaField == 'updateTime')
##        ${classEditDTO}.setUpdateTime(getNowLocalDateTime());
###end
#end
#if($table.sub)
#foreach($column in $subTable.columns)
#if($column.javaField.toLowerCase().indexOf("id") != -1)
#set($subPkType=$column.javaType)
#set($SubPkClassName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#break
#end
#end
        HashSet<${subPkType}> ids = new HashSet<>(${className}Mapper.select${SubPkClassName}sBy${subTableFkClassName}(${pkColumn.javaField}));
        ${classEditDTO}.get${subClassName}List().forEach(item -> ids.remove(item.get${SubIdAttrName}()));
        // 需要删除的子表ids
        ${className}Mapper.delete${subClassName}(new ArrayList<>(ids));
        // 构建更新和插入的list
        Map<Boolean, List<${subClassName}>> insertUpdateMap =
            StreamUtils.partitioningBy(${classEditDTO}.get${subClassName}List(), item -> item.get${SubIdAttrName}() == null);
        update${subClassName}(insertUpdateMap.get(false));
        insert${subClassName}(${className}.get${pkColumn.capJavaField}(), insertUpdateMap.get(true));
#end
        return ${className}Mapper.update${ClassName}(super.convertT(${classEditDTO}).set${IdAttrName}(${pkColumn.javaField}));
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键集合
     * @return 结果
     */
#if($table.sub)
    @Transactional(rollbackFor = Exception.class)
#end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}s(List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);
#end
        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s);
    }

    /**
     * 删除单个${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
#if($table.sub)
    @Transactional(rollbackFor = Exception.class)
#end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
#end
        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
    }
#if($table.sub)

    /**
     * 新增${subTable.functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @param insertList 插入列
     */
    public void insert${subClassName}(${pkColumn.javaType} ${pkColumn.javaField}, List<${subClassName}> insertList) {
        if (StringUtils.isNotNull(insertList))
        {
            List<${subClassName}> list = new ArrayList<>();
            for (${subClassName} ${subclassName} : insertList)
            {
                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                ${subclassName}.setCreateById(getUserIdOrNotLogged());
                ${subclassName}.setCreateByName(getUserNameOrNotLogged());
                ${subclassName}.setCreateTime(getNowLocalDateTime());
                list.add(${subclassName});
            }
            if (list.size() > 0)
            {
                list.forEach(${className}Mapper::insert${subClassName});
            }
        }
    }
#end
#if($table.sub)

    /**
     * 更新${subTable.functionName}信息
     *
     * @param updateList 更新列
     */
    public void update${subClassName}(List<${subClassName}> updateList) {
        if (StringUtils.isNotNull(updateList))
        {
            List<${subClassName}> list = new ArrayList<>();
            for (${subClassName} ${subclassName} : updateList)
            {
                ${subclassName}.setUpdateById(getUserIdOrNotLogged());
                ${subclassName}.setUpdateByName(getUserNameOrNotLogged());
                ${subclassName}.setUpdateTime(getNowLocalDateTime());
                list.add(${subclassName});
            }
            if (list.size() > 0)
            {
                list.forEach(${className}Mapper::update${subClassName});
            }
        }
    }
#end
}
