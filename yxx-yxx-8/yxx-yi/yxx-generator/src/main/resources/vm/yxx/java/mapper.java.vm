package ${packageName}.mapper;

import java.util.List;

#if($table.sub || $table.tree)
#set($ClassDO=${ClassName})
#set($classDO=${className})
#set($ClassQueryDTO=${ClassName})
#set($classQueryDTO=${className})
#else
#set($ClassDO="${ClassName}DO")
#set($classDO="${className}DO")
#set($ClassQueryDTO="${ClassName}QueryDTO")
#set($classQueryDTO="${className}QueryDTO")
#end
#if($table.sub || $table.tree)
import ${packageName}.entity.${ClassDO};
#else
import ${packageName}.entity.${ClassDO};
import ${packageName}.entity.${ClassQueryDTO};
#end
#if($table.sub)
import ${packageName}.entity.${subClassName};
#end
import com.yxx.common.core.mapper.BaseMapperPlus;
import org.springframework.stereotype.Repository;

/**
 * ${functionName}Mapper接口
 *
 * @author ${author}
 * @date ${datetime}
 */
@Repository
public interface ${ClassName}Mapper extends BaseMapperPlus<${ClassDO}> {

    /**
     * 查询${functionName}列表
     *
     * @param ${classQueryDTO} ${functionName}查询实体
     * @return ${functionName}集合
     */
    public List<${ClassDO}> select${ClassName}List(${ClassQueryDTO} ${classQueryDTO});

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}单个
     */
    public ${ClassDO} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 新增${functionName}
     *
     * @param ${classDO} ${functionName}数据库实体
     * @return 结果
     */
    public int insert${ClassName}(${ClassDO} ${classDO});

    /**
     * 修改${functionName}
     *
     * @param ${classDO} ${functionName}数据库实体
     * @return 结果
     */
    public int update${ClassName}(${ClassDO} ${classDO});

    /**
     * 删除${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的数据主键集合
     * @return 结果
     */
    public int delete${ClassName}By${pkColumn.capJavaField}s(List<${pkColumn.javaType}> ${pkColumn.javaField}s);
#if($table.sub)

    /**
     * 批量删除${subTable.functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的数据主键集合
     * @return 结果
     */
    public int delete${subClassName}By${subTableFkClassName}s(List<${pkColumn.javaType}> ${pkColumn.javaField}s);

    /**
     * 通过${functionName}主键删除${subTable.functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果
     */
    public int delete${subClassName}By${subTableFkClassName}(${pkColumn.javaType} ${pkColumn.javaField});
#foreach($column in $subTable.columns)
#if($column.javaField.toLowerCase().indexOf("id") != -1)
#set($subPkType=$column.javaType)
#set($subPkJavaField=$column.javaField)
#set($SubPkJavaField=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#set($SubPkClassName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#break
#end
#end

    /**
     * 查询对应的ids
     *
     * @param ${pkColumn.javaField} 关联id
     * @return 结果
     */
    public List<${subPkType}> select${SubPkClassName}sBy${subTableFkClassName}(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 新增${subTable.functionName}
     *
     * @param ${subclassName} ${subTable.functionName}
     * @return 结果
     */
    public int insert${subClassName}(${subClassName} ${subclassName});

    /**
     * 更新${subTable.functionName}
     *
     * @param ${subclassName} ${subTable.functionName}
     * @return 结果
     */
    public int update${subClassName}(${subClassName} ${subclassName});

    /**
     * 删除${subTable.functionName}
     *
     * @param ${subPkJavaField}s ${subTable.functionName}
     * @return 结果
     */
    public int delete${subClassName}(List<${subPkType}> ${subPkJavaField}s);
#end
}
