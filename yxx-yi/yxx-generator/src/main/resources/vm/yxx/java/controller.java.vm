package ${packageName}.controller;

import java.util.List;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import lombok.RequiredArgsConstructor;
import com.yxx.common.annotation.Log;
import com.yxx.common.yxx.controllre.BaseControllerPlus;
import com.yxx.common.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.yxx.common.utils.poi.ExcelUtil;
import com.yxx.common.core.domain.R;
#if($table.crud || $table.sub)
import com.yxx.common.yxx.domain.PageResult;
#elseif($table.tree)
#end
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.annotations.ApiOperation;

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Api("${functionName}管理")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
@RequiredArgsConstructor
public class ${ClassName}Controller extends BaseControllerPlus
{
    private final I${ClassName}Service ${className}Service;

    @ApiOperation("查询${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public PageResult<?> list(@Parameter(description = "DTO对象", in = ParameterIn.QUERY) ${ClassName} ${className})
    {
        startPage();
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return getDataTableToPR(list, ${className});
    }
#elseif($table.tree)
    public R<List<${ClassName}>> list(@Parameter(description = "DTO对象") ${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return R.ok(list);
    }
#end

    @ApiOperation("导出${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, @Parameter(description = "DTO对象", in = ParameterIn.QUERY) ${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        ExcelUtil<${ClassName}> util = new ExcelUtil<>(${ClassName}.class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    @ApiOperation("导入${functionName}模板")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:import')")
    @PostMapping("/importTemplate")
    public void importTemplate(HttpServletResponse response)
    {
        ExcelUtil<${ClassName}> util = new ExcelUtil<>(${ClassName}.class);
        util.importTemplateExcel(response, "导入${functionName}模板数据");
    }

    @ApiOperation("导入${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:import')")
    @Log(title = "${functionName}", businessType = BusinessType.IMPORT)
    @PostMapping("/importData")
    public R<Boolean> importData(MultipartFile file) throws IOException
    {
        ExcelUtil<${ClassName}> util = new ExcelUtil<>(${ClassName}.class);
        List<${ClassName}> list = util.importExcel(file.getInputStream());
        return R.ok(${className}Service.saveBatch(list), "成功导入 " + list.size() + " 条记录");
    }

    @ApiOperation("获取${functionName}详细信息")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pkColumn.javaField}", value = "主键Id", required = true, dataType = "${pkColumn.javaType}", dataTypeClass = ${pkColumn.javaType}.class, paramType = "path"),
    })
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public R<${ClassName}> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField})
    {
        return R.ok(${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}));
    }

    @ApiOperation("新增${functionName}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${className}", value = "DTO对象", required = true, dataType = "${ClassName}", dataTypeClass = ${ClassName}.class, paramType = "body"),
    })
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public R<String> add(@RequestBody ${ClassName} ${className})
    {
        return toResult(${className}Service.insert${ClassName}(${className}));
    }

    @ApiOperation("修改${functionName}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${className}", value = "DTO对象", required = true, dataType = "${ClassName}", dataTypeClass = ${ClassName}.class, paramType = "body"),
    })
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public R<String> edit(@RequestBody ${ClassName} ${className})
    {
        return toResult(${className}Service.update${ClassName}(${className}));
    }

    @ApiOperation("删除${functionName}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pkColumn.javaField}s", value = "主键数组", required = true, dataType = "${pkColumn.javaType}[]", dataTypeClass = ${pkColumn.javaType}[].class, paramType = "path", allowMultiple = true),
    })
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public R<String> remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s)
    {
        return toResult(${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s));
    }
}
