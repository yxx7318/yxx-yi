package ${packageName}.controller;

import java.util.List;
import ${javax}.servlet.http.HttpServletResponse;
import java.io.IOException;

import org.springframework.web.multipart.MultipartFile;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import com.yxx.common.annotation.Log;
import com.yxx.common.core.controller.BaseControllerPlus;
import com.yxx.common.enums.BusinessType;
#if($table.sub || $table.tree)
#set($ClassDo=${ClassName})
#set($ClassVo=${ClassName})
#set($ClassQueryDto=${ClassName})
#set($classQueryDto="${className}")
#set($ClassEditDto="${ClassName}")
#set($classEditDto="${className}")
#else
#set($ClassDo="${ClassName}Do")
#set($ClassVo="${ClassName}Vo")
#set($ClassQueryDto="${ClassName}QueryDto")
#set($classQueryDto="${className}QueryDto")
#set($ClassEditDto="${ClassName}EditDto")
#set($classEditDto="${className}EditDto")
#end
#if($table.sub || $table.tree)
import ${packageName}.entity.${ClassDo};
#else
import ${packageName}.entity.${ClassDo};
import ${packageName}.entity.${ClassVo};
import ${packageName}.entity.${ClassQueryDto};
import ${packageName}.entity.${ClassEditDto};
#end
import ${packageName}.service.I${ClassName}Service;
import com.yxx.common.utils.poi.ExcelUtil;
import com.yxx.common.core.domain.R;
#if($table.crud || $table.sub)
import com.yxx.common.core.domain.PageResult;
#elseif($table.tree)
#end
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.Operation;
#if(${javaVersion} == "1.8")
import org.springdoc.api.annotations.ParameterObject;
#else
import org.springdoc.core.annotations.ParameterObject;
#end

import org.springframework.validation.annotation.Validated;


/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@Tag(name = "${functionName}管理-${ClassName}")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
@RequiredArgsConstructor(onConstructor_ = {@Lazy, @Autowired})
public class ${ClassName}Controller extends BaseControllerPlus {

    private final I${ClassName}Service ${className}Service;

    @Operation(summary = "查询--${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public PageResult<${ClassVo}> list(@ParameterObject ${ClassQueryDto} ${classQueryDto}) {
        return ${className}Service.select${ClassVo}Page(${classQueryDto});
    }
#elseif($table.tree)
    public R<List<${ClassVo}>> list(@ParameterObject ${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return R.ok(list);
    }
#end

    @Operation(summary = "查询--${functionName}单个")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public R<${ClassVo}> getInfo(@PathVariable ${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.ok(${className}Service.select${ClassVo}By${pkColumn.capJavaField}(${pkColumn.javaField}));
    }

    @Operation(summary = "新增--${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public R<String> add(@RequestBody @Validated ${ClassEditDto} ${classEditDto}) {
        return toResult(${className}Service.insert${ClassName}(${classEditDto}));
    }

    @Operation(summary = "修改--${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping("/{${pkColumn.javaField}}")
    public R<String> update(@PathVariable ${pkColumn.javaType} ${pkColumn.javaField}, @RequestBody @Validated ${ClassEditDto} ${classEditDto}) {
        return toResult(${className}Service.update${ClassName}(${pkColumn.javaField}, ${classEditDto}));
    }

    @Operation(summary = "删除--${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public R<String> delete(@PathVariable List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
        return toResult(${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s));
    }

    @Operation(summary = "导出--${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, @ParameterObject ${ClassQueryDto} ${classQueryDto}) {
        List<${ClassDo}> list = ${className}Service.select${ClassDo}List(${classQueryDto});
        ExcelUtil<${ClassDo}> util = new ExcelUtil<>(${ClassDo}.class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    @Operation(summary = "导出--${functionName}模板")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:import')")
    @PostMapping("/importTemplate")
    public void exportTemplate(HttpServletResponse response) {
        ExcelUtil<${ClassDo}> util = new ExcelUtil<>(${ClassDo}.class);
        util.importTemplateExcel(response, "导入${functionName}模板数据");
    }

    @Operation(summary = "导入--${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:import')")
    @Log(title = "${functionName}", businessType = BusinessType.IMPORT)
    @PostMapping("/importData")
    public R<Boolean> importData(MultipartFile file) throws IOException {
        ExcelUtil<${ClassDo}> util = new ExcelUtil<>(${ClassDo}.class);
        List<${ClassDo}> list = util.importExcel(file.getInputStream());
        return R.ok(${className}Service.saveBatch(list), "成功导入 " + list.size() + " 条记录");
    }
}
