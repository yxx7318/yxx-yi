package ${packageName}.service.impl;

import java.util.List;

#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.yxx.common.utils.DateUtils;
#break
#end
#end
import com.yxx.common.core.domain.PageResult;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
#if($table.sub)
import java.util.ArrayList;
import com.yxx.common.utils.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${subClassName};
#end
import lombok.RequiredArgsConstructor;
import com.yxx.common.core.service.impl.ServiceImplPlus;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName}Do;
import ${packageName}.domain.${ClassName}Vo;
import ${packageName}.domain.${ClassName}QueryDto;
import ${packageName}.domain.${ClassName}EditDto;
import ${packageName}.service.I${ClassName}Service;

#foreach ($column in $columns)
#if($column.javaField.toLowerCase().indexOf("id") != -1)
## 获取主键，并首字母大写
#set($IdAttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#break
#end
#end
/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ${ClassName}ServiceImpl extends ServiceImplPlus<${ClassName}Mapper, ${ClassName}Do> implements I${ClassName}Service {

    private final ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}分页结果
     *
     * @param ${className}QueryDto ${functionName}查询实体
     * @return ${functionName}分页
     */
    @Override
    public PageResult<${ClassName}Vo> select${ClassName}Page(${ClassName}QueryDto ${className}QueryDto) {
        startPage();
        PageResult<${ClassName}Vo> page
                = super.getMyBatisPageResult(select${ClassName}DoList(${className}QueryDto), ${ClassName}Vo.class);
        clearPage();
        return page;
    }

    /**
     * 查询${functionName}Vo列表
     *
     * @param ${className}QueryDto ${functionName}查询实体
     * @return ${functionName}集合
     */
    @Override
    public List<${ClassName}Vo> select${ClassName}VoList(${ClassName}QueryDto ${className}QueryDto) {
        return super.convertVoList(${className}Mapper.select${ClassName}List(${className}QueryDto), ${ClassName}Vo.class);
    }

    /**
     * 查询${functionName}Do列表
     *
     * @param ${className}QueryDto ${functionName}查询实体
     * @return ${functionName}集合
     */
    @Override
    public List<${ClassName}Do> select${ClassName}DoList(${ClassName}QueryDto ${className}QueryDto) {
        return ${className}Mapper.select${ClassName}List(${className}QueryDto);
    }

    /**
     * 查询单个${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}单个
     */
    @Override
    public ${ClassName}Vo select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        return super.convertBean(${className}Mapper.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}), ${ClassName}Vo.class);
    }

    /**
     * 新增${functionName}
     *
     * @param ${className}EditDto ${functionName}编辑实体
     * @return 结果
     */
#if($table.sub)
    @Transactional(rollbackFor = Exception.class)
#end
    @Override
    public int insert${ClassName}(${ClassName}EditDto ${className}EditDto) {
#foreach ($column in $columns)
#if($column.javaField == 'createTime')
        ${className}EditDto.setCreateTime(DateUtils.getNowDate());
#end
#if($column.javaField == 'createBy')
        ${className}EditDto.setCreateBy(getUserNameOrNotLogged());
#end
#end
#if($table.sub)
        int rows = ${className}Mapper.insert${ClassName}(${className});
        insert${subClassName}(${className});
        return rows;
#else
        return ${className}Mapper.insert${ClassName}(super.convertT(${className}EditDto));
#end
    }

    /**
     * 修改${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @param ${className}EditDto ${functionName}编辑实体
     * @return 结果
     */
#if($table.sub)
    @Transactional(rollbackFor = Exception.class)
#end
    @Override
    public int update${ClassName}(${pkColumn.javaType} ${pkColumn.javaField}, ${ClassName}EditDto ${className}EditDto) {
#foreach ($column in $columns)
#if($column.javaField == 'updateTime')
        ${className}EditDto.setUpdateTime(DateUtils.getNowDate());
#end
#if($column.javaField == 'updateBy')
        ${className}EditDto.setUpdateBy(getUserNameOrNotLogged());
#end
#end
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${className}.get${pkColumn.capJavaField}());
        insert${subClassName}(${className});
#end
        return ${className}Mapper.update${ClassName}(super.convertT(${className}EditDto).set${IdAttrName}(${pkColumn.javaField}));
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键集合
     * @return 结果
     */
#if($table.sub)
    @Transactional(rollbackFor = Exception.class)
#end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}s(List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);
#end
        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s);
    }

    /**
     * 删除单个${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
#if($table.sub)
    @Transactional(rollbackFor = Exception.class)
#end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
#end
        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
    }
#if($table.sub)

    /**
     * 新增${subTable.functionName}信息
     *
     * @param ${className} ${functionName}对象
     */
    public void insert${subClassName}(${ClassName} ${className}) {
        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
        ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
        if (StringUtils.isNotNull(${subclassName}List))
        {
            List<${subClassName}> list = new ArrayList<${subClassName}>();
            for (${subClassName} ${subclassName} : ${subclassName}List)
            {
                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                list.add(${subclassName});
            }
            if (list.size() > 0)
            {
                ${className}Mapper.batch${subClassName}(list);
            }
        }
    }
#end
}
